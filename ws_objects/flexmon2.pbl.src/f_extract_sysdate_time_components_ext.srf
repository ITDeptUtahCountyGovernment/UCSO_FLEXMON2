$PBExportHeader$f_extract_sysdate_time_components_ext.srf
global type f_extract_sysdate_time_components_ext from function_object
end type

forward prototypes
global function integer f_extract_sysdate_time_components_ext (string ls_sysdatetime, string ls_format, ref string ls_month, ref string ls_day, ref string ls_year, ref string ls_hour, ref string ls_minute, ref string ls_second, ref string ls_date, ref string ls_time)
end prototypes

global function integer f_extract_sysdate_time_components_ext (string ls_sysdatetime, string ls_format, ref string ls_month, ref string ls_day, ref string ls_year, ref string ls_hour, ref string ls_minute, ref string ls_second, ref string ls_date, ref string ls_time);//f_extract_sysdate_time_components_ext(ls_date, ls_format, ref ls_month, ref ls_day, ref ls_year, ref ls_hour, ref ls_minute, ref ls_second, ref ls_date, ref ls_time)
//TO RETURN THE CORRECT DATE AND TIME COMPONENTS ls_sysdate MUST BE IN ONE OF THE FOLLOWING FORMATS.
//valid formats
//DD-MMM-YYYY HH:MM:SS"
//DD-MMM-YYYY HH:MM"
//MM-DD-YYYY HH:MM:SS"
//MM-DD-YYYY HH:MM"
//DD/MMM/YYYY HH:MM:SS"
//DD/MMM/YYYY HH:MM"
//MM/DD/YYYY HH:MM:SS"
//MM/DD/YYYY HH:MM"	
integer li_return_value
string ls_date_delim
boolean lb_is_month_name_format
integer li_format_num
boolean lb_have_time_components
lb_have_time_components = true
li_return_value = -1 //success  -1 for failure
ls_format = Upper(ls_format) //allow date formats to be passed in lower case
if(f_is_valid_date_format(ls_format, ref li_format_num) = true) then
	if(f_len(ls_sysdatetime) > 0) then
		if(match(ls_sysdatetime, "-") = true) then
			ls_date_delim = "-"
		elseif(match(ls_sysdatetime, "/") = true) then
			ls_date_delim = "/"
		end if
		if(match(ls_sysdatetime, "MMM") = true) then
			lb_is_month_name_format = true
		else
			lb_is_month_name_format = false
		end if
		string lsa_parsedata[]
		integer li_numparsedataitems
		integer li_allocated_num_items
		string ls_parsedelim
		li_allocated_num_items = f_allocate_string_array(6, lsa_parsedata)
		if(li_allocated_num_items = 6) then
			ls_parsedelim = " "
			li_numparsedataitems = f_parseoutstring(ls_sysdatetime, ls_parsedelim, ref lsa_parsedata)
			if(li_numparsedataitems >= 1) then //date time components
				if(li_numparsedataitems = 1) then //not time components
					lb_have_time_components = false
				end if
				ls_date = lsa_parsedata[1]
				if(lb_have_time_components = true) then
					ls_time = lsa_parsedata[2]
				else
					ls_time = "00:00:00"
				end if
				string ls_mm
				string ls_dd
				string ls_yyyy
				string ls_hh
				string ls_min
				string ls_ss
				string lsa_dt_components[]
				string lsa_nullarray[]
				integer li_numallocdtcomponents
				integer li_numparsedtcomponents
				li_numallocdtcomponents = f_allocate_string_array(3, lsa_dt_components)
				if(li_numallocdtcomponents = 3) then
					li_numparsedtcomponents = f_parseoutstring(ls_date, ls_date_delim, lsa_dt_components)
					//valid formats
					//DD-MMM-YYYY HH:MM:SS"
					//DD-MMM-YYYY HH:MM"
					//MM-DD-YYYY HH:MM:SS"
					//MM-DD-YYYY HH:MM"
					//DD/MMM/YYYY HH:MM:SS"
					//DD/MMM/YYYY HH:MM"
					//MM/DD/YYYY HH:MM:SS"
					//MM/DD/YYYY HH:MM"						
					if(li_numparsedtcomponents = 3) then
						if((match(ls_format, "DD-MMM") = true) or (match(ls_format, "DD/MMM") = true))then
							ls_month = lsa_dt_components[2]
							ls_day = lsa_dt_components[1]
							ls_year = lsa_dt_components[3]
						elseif((match(ls_format, "MM-DD") = true) or (match(ls_format, "MM/DD") = true)) then
							ls_month = lsa_dt_components[1]
							ls_day = lsa_dt_components[2]
							ls_year = lsa_dt_components[3]
						end if	
						if(lb_have_time_components = true) then
							lsa_dt_components = lsa_nullarray
							ls_parsedelim = ":"
							li_numparsedtcomponents = f_parseoutstring(ls_time, ls_parsedelim, lsa_dt_components)
							if(li_numparsedtcomponents >= 2) then
								ls_hour = lsa_dt_components[1]
								ls_minute = lsa_dt_components[2]
								if(li_numparsedtcomponents = 3) then
									ls_second = lsa_dt_components[3]
								else
									ls_second = ""
								end if
								li_return_value = 0
							end if
						else
							ls_hour = "00"
							ls_minute = "00"
							ls_second = "00"
							li_return_value = 0
						end if
					end if
				end if
			end if
		end if
	end if
end if
return li_return_value
end function

